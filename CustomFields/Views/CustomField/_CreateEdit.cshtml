@using CustomFields.Domain.Enums
@using CustomFields.Helpers
@model CustomFields.ViewModels.CreateEditViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    bool isOfChoosable = CustomFieldHelper.IsOfChoosableType(Model.CustomField?.FieldType);
    bool isOfTextType = CustomFieldHelper.IsOfTextType(Model.CustomField?.FieldType);
    bool editing = Model.CustomField != null && Model.CustomField.Id != 0;
    string choosableClass = isOfChoosable ? "" : "hidden";
    string textTypeClass = isOfTextType ? "" : "hidden";
}

<h1>Has existing: @Model.HasExistingData</h1>
<h1>Editing: @editing</h1>
<h1>Choosable: @choosableClass</h1>
<h1>Text: @textTypeClass</h1>
<h1>CF id: @Model.CustomField?.Id</h1>
<h1>CF type: @Model.CustomField?.FieldType</h1>

<div class="form-group">
    <label asp-for="CustomField.FieldName.FieldDefaultName" class="control-label"></label>
    <input asp-for="CustomField.FieldName.FieldDefaultName" class="form-control" />
    <span asp-validation-for="CustomField.FieldName" class="text-danger"></span>
</div>
@if (!Model.HasExistingData)
{
    <div class="form-group">
        <label asp-for="CustomField.FieldType" class="control-label"></label>
        <select asp-for="CustomField.FieldType" asp-items="Html.GetEnumSelectList<FieldType>()" class="form-control">
            @if (!editing)
            {
                <option disabled selected>-- Select type --</option>
            }
        </select>
        <span asp-validation-for="CustomField.FieldType" class="text-danger"></span>
    </div>
}

@if (!Model.HasExistingData || isOfChoosable)
{
    <div id="field-values" class="form-group @choosableClass">
        <label asp-for="CustomField.PossibleValues" class="control-label"></label>
        <input asp-for="CustomField.PossibleValues" class="form-control" />
        <span asp-validation-for="CustomField.PossibleValues" class="text-danger"></span>
    </div>
}

@if (!Model.HasExistingData || isOfTextType)
{
    <div id="text-fields" class="@textTypeClass">
        <div class="form-group">
            <label asp-for="CustomField.MinLength" class="control-label"></label>
            <input asp-for="CustomField.MinLength" class="form-control" />
            <span asp-validation-for="CustomField.MinLength" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="CustomField.MaxLength" class="control-label"></label>
            <input asp-for="CustomField.MaxLength" class="form-control" />
            <span asp-validation-for="CustomField.MaxLength" class="text-danger"></span>
        </div>
    </div>
}

<div class="form-group">
    <div class="checkbox">
        <label>
            <input asp-for="CustomField.IsRequired" /> @Html.DisplayNameFor(model => model.CustomField.IsRequired)
        </label>
    </div>
</div>

@if (!editing)
{
    <div class="form-group">
        <div class="checkbox">
            <label>
                <input name="CustomField.Status" type="checkbox" value="@((int)FieldStatus.Active)" />Activate field after create
            </label>
        </div>
    </div>
}

