@using Domain.Enums
@using WebApplication.Helpers
@model CustomFieldViewModel

@{
    bool isOfChoosable = CustomFieldHelper.IsOfChoosableType(Model.CustomField?.FieldType);
    bool editing = Model.CustomField?.FieldType != null;
    string hiddenClass = !Model.HasExistingData || !editing ? "hidden" : "";
    bool disabledValue = Model?.CustomField?.Status == FieldStatus.Disabled; 
}

<div class="form-group">
    <label asp-for="CustomField.FieldName" class="control-label"></label>
    <input asp-for="CustomField.FieldName" class="form-control" />
    <span asp-validation-for="CustomField.FieldName" class="text-danger"></span>
</div>
@if (!Model.HasExistingData)
{
    <div class="form-group">
        <label asp-for="CustomField.FieldType" class="control-label"></label>
        <select asp-for="CustomField.FieldType" asp-items="Html.GetEnumSelectList<FieldType>()" class="form-control">
        @if (!editing)
        {
            <option disabled selected>-- Select type --</option>
        }
        </select>
        <span asp-validation-for="CustomField.FieldType" class="text-danger"></span>
    </div>
}

@if (!Model.HasExistingData || isOfChoosable)
{
    <div id="field-values" class="form-group @hiddenClass hideable">
        <label asp-for="CustomField.PossibleValues" class="control-label"></label>
        <input asp-for="CustomField.PossibleValues" class="form-control" />
        <span asp-validation-for="CustomField.PossibleValues" class="text-danger"></span>
    </div>
}

@if (!Model.HasExistingData || !isOfChoosable)
{
    <div id="text-fields" class="@hiddenClass hideable">
        <div class="form-group">
            <label asp-for="CustomField.MinLength" class="control-label"></label>
            <input asp-for="CustomField.MinLength" class="form-control" />
            <span asp-validation-for="CustomField.MinLength" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="CustomField.MaxLength" class="control-label"></label>
            <input asp-for="CustomField.MaxLength" class="form-control" />
            <span asp-validation-for="CustomField.MaxLength" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="CustomField.RegexPattern" class="control-label"></label>
            <input asp-for="CustomField.RegexPattern" class="form-control" />
            <span asp-validation-for="CustomField.RegexPattern" class="text-danger"></span>
        </div>
    </div>
}

<div class="form-group">
    <div class="checkbox">
        <label>
            <input asp-for="CustomField.IsRequired" /> @Html.DisplayNameFor(model => model.CustomField.IsRequired)
        </label>
    </div>
</div>

<div class="form-group">
    <div class="checkbox">
        <label>
            <input name="CustomField.Status" type="checkbox" value="@((int)FieldStatus.Disabled)" checked="@disabledValue"/> @FieldStatus.Disabled
        </label>
    </div>
</div>
